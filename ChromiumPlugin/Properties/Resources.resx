<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutScript" xml:space="preserve">
    <value>&lt;HEAD&gt;
&lt;STYLE&gt;BODY {
	FONT-FAMILY: Verdana; MARGIN-TOP: 0px; COLOR: #000000; TEXT-ALIGN: left; MARGIN-LEFT: 0px; BACKGROUND-COLOR: white
}
#content {
	FONT-SIZE: 0.7em; PADDING-BOTTOM: 2em; MARGIN-LEFT: 30px
}
A:link {
	TEXT-DECORATION: underline; FONT-WEIGHT: bold; COLOR: #336699
}
A:visited {
	TEXT-DECORATION: underline; FONT-WEIGHT: bold; COLOR: #6699cc
}
A:active {
	TEXT-DECORATION: underline; FONT-WEIGHT: bold; COLOR: #336699
}
A:hover {
	TEXT-DECORATION: underline; FONT-WEIGHT: bold; COLOR: #cc3300
}
P {
	MARGIN-BOTTOM: 12px; FONT-FAMILY: Verdana; MARGIN-TOP: 0px; COLOR: #000000
}
PRE {
	FONT-SIZE: 8pt; BORDER-TOP: #f0f0e0 1px solid; FONT-FAMILY: Arial; BORDER-RIGHT: #f0f0e0 1px solid; MARGIN-TOP: -5px; BORDER-BOTTOM: #f0f0e0 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 5px; BORDER-LEFT: #f0f0e0 1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: #e5e5cc
}
TD {
	FONT-SIZE: 0.7em; FONT-FAMILY: Verdana; COLOR: #000000
}
H1 {
	COLOR: #003366; MARGIN-LEFT: -15px
}
H2 {
	FONT-SIZE: 1.5em; MARGIN-BOTTOM: 10px; BORDER-TOP: #003366 1px solid; MARGIN-TOP: 25px; FONT-WEIGHT: bold; COLOR: #003366; MARGIN-LEFT: -15px
}
H3 {
	FONT-SIZE: 1.1em; MARGIN-BOTTOM: 10px; MARGIN-TOP: 10px; COLOR: #000000; MARGIN-LEFT: -15px
}
UL {
	MARGIN-TOP: 10px; MARGIN-LEFT: 20px
}
OL {
	MARGIN-TOP: 10px; MARGIN-LEFT: 20px
}
LI {
	MARGIN-TOP: 10px; COLOR: #000000
}
FONT.value {
	FONT-WEIGHT: bold; COLOR: darkblue
}
FONT.key {
	FONT-WEIGHT: bold; COLOR: darkgreen
}
.heading1 {
	FONT-SIZE: 26px; MARGIN-BOTTOM: 0px; FONT-FAMILY: Tahoma; WIDTH: 105%; MARGIN-TOP: 0px; FONT-WEIGHT: normal; COLOR: #ffffff; PADDING-BOTTOM: 3px; PADDING-TOP: 10px; PADDING-LEFT: 15px; MARGIN-LEFT: -30px; BACKGROUND-COLOR: #003366
}
.button {
	FONT-SIZE: 1em; BORDER-TOP: #cccccc 1px solid; FONT-FAMILY: Verdana; BORDER-RIGHT: #666666 1px solid; BORDER-BOTTOM: #666666 1px solid; BORDER-LEFT: #cccccc 1px solid; BACKGROUND-COLOR: #dcdcdc
}
.frmheader {
	FONT-SIZE: 0.7em; FONT-FAMILY: Verdana; BACKGROUND: #dcdcdc; BORDER-BOTTOM: #dcdcdc 1px solid; FONT-WEIGHT: normal; COLOR: #000000; PADDING-BOTTOM: 2px; PADDING-TOP: 2px
}
.frmtext {
	FONT-SIZE: 0.7em; MARGIN-BOTTOM: 0px; FONT-FAMILY: Verdana; MARGIN-TOP: 8px; MARGIN-LEFT: 32px
}
.frmInput {
	FONT-SIZE: 1em; FONT-FAMILY: Verdana
}
.function {
	MARGIN-BOTTOM: 30px; BORDER-BOTTOM: #003366 1px solid
}
.intro {
	MARGIN-LEFT: -15px
}
&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY style="ZOOM: 1"&gt;
&lt;DIV id=content&gt;&lt;TEXTAREA id=holdtext style="DISPLAY: none"&gt;&lt;/TEXTAREA&gt;
&lt;P class=heading1&gt;Client Scripting&lt;/P&gt;&lt;BR&gt;&lt;INPUT onclick='holdtext.innerText = document.documentElement.innerHTML; Copied = holdtext.createTextRange(); Copied.execCommand("Copy");' class=button style="FONT-SIZE: xx-small" type=button value="Copy Source to Clipboard"&gt;
&lt;H1 onclick="if (Application.style.display=='none') Application.style.display='inline'; else Application.style.display='none';" style="CURSOR: hand"&gt;Application functions&lt;/H1&gt;
&lt;DIV id=Application class=function style="DISPLAY: none"&gt;
&lt;H2&gt;AddToExport&lt;/H2&gt;
&lt;H4&gt;Add To Export List &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Add current timeline selection to the export
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.AddToExport()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.AddToExport()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.AddToExport();
&lt;/PRE&gt;
&lt;H2&gt;Close&lt;/H2&gt;
&lt;H4&gt;Close the application &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.Close()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.Close()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.Close();
&lt;/PRE&gt;
&lt;H2&gt;HideFullscreenView&lt;/H2&gt;
&lt;H4&gt;Hide the full screen view(s) &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Leaves full screen mode for all views.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.HideFullscreenView()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.HideFullscreenView()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.HideFullscreenView();
&lt;/PRE&gt;
&lt;H2&gt;HideSidePane&lt;/H2&gt;
&lt;H4&gt;Hide the side pane &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.HideSidePane()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.HideSidePane()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.HideSidePane();
&lt;/PRE&gt;
&lt;H2&gt;Maximize&lt;/H2&gt;
&lt;H4&gt;Maximize the application &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.Maximize()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.Maximize()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.Maximize();
&lt;/PRE&gt;
&lt;H2&gt;Minimize&lt;/H2&gt;
&lt;H4&gt;Minimize the application &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.Minimize()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.Minimize()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.Minimize();
&lt;/PRE&gt;
&lt;H2&gt;ReloadConfiguration&lt;/H2&gt;
&lt;H4&gt;Reload server configuration &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Reloads views and camera configurations from the server.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Application_ReloadConfiguration_return.value = SCS.Application.ReloadConfiguration();}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Application_ReloadConfiguration_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Application.ReloadConfiguration())" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Application.ReloadConfiguration();
&lt;/PRE&gt;
&lt;H2&gt;Restore&lt;/H2&gt;
&lt;H4&gt;Restore the application &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.Restore()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.Restore()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.Restore();
&lt;/PRE&gt;
&lt;H2&gt;Search&lt;/H2&gt;
&lt;H4&gt;Search for camera and view text &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Search for cameras and views in the current configuration.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.Search()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.Search()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.Search();
&lt;/PRE&gt;
&lt;H2&gt;ShowBrowse&lt;/H2&gt;
&lt;H4&gt;Show Playback &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowBrowse()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowBrowse()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowBrowse();
&lt;/PRE&gt;
&lt;H2&gt;ShowEvidenceLockDialogViewItem&lt;/H2&gt;
&lt;H4&gt;Create new evidence lock &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowEvidenceLockDialogViewItem()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowEvidenceLockDialogViewItem()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowEvidenceLockDialogViewItem();
&lt;/PRE&gt;
&lt;H2&gt;ShowEvidenceLockList&lt;/H2&gt;
&lt;H4&gt;Show evidence locks &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowEvidenceLockList()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowEvidenceLockList()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowEvidenceLockList();
&lt;/PRE&gt;
&lt;H2&gt;ShowExportDialogDevice&lt;/H2&gt;
&lt;H4&gt;Show Export dialog &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowExportDialogDevice(devices, startTime, endTime);
&lt;/PRE&gt;
&lt;H2&gt;ShowExportDialogViewItem&lt;/H2&gt;
&lt;H4&gt;Show Export dialog &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowExportDialogViewItem()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowExportDialogViewItem()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowExportDialogViewItem();
&lt;/PRE&gt;
&lt;H2&gt;ShowFullScreenView&lt;/H2&gt;
&lt;H4&gt;Show full screen view(s) &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Enters full screen mode for all views.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowFullScreenView()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowFullScreenView()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowFullScreenView();
&lt;/PRE&gt;
&lt;H2&gt;ShowLive&lt;/H2&gt;
&lt;H4&gt;Show Live &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowLive()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowLive()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowLive();
&lt;/PRE&gt;
&lt;H2&gt;ShowRetrievalDialogViewItem&lt;/H2&gt;
&lt;H4&gt;Show Retrieval dialog &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowRetrievalDialogViewItem()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowRetrievalDialogViewItem()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowRetrievalDialogViewItem();
&lt;/PRE&gt;
&lt;H2&gt;ShowSetup&lt;/H2&gt;
&lt;H4&gt;Show Setup &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowSetup()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowSetup()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowSetup();
&lt;/PRE&gt;
&lt;H2&gt;ShowSidePane&lt;/H2&gt;
&lt;H4&gt;Show the side pane &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Shows the side pane in the left side of the application. 
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ShowSidePane()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ShowSidePane()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ShowSidePane();
&lt;/PRE&gt;
&lt;H2&gt;ToggleFullscreenView&lt;/H2&gt;
&lt;H4&gt;Toggle full screen view(s) &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Enters or leaves full screen mode for all views.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ToggleFullscreenView()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ToggleFullscreenView()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ToggleFullscreenView();
&lt;/PRE&gt;
&lt;H2&gt;ToggleSidePane&lt;/H2&gt;
&lt;H4&gt;Toggle the side pane &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Shows or hides the side pane.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Application.ToggleSidePane()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Application.ToggleSidePane()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Application.ToggleSidePane();
&lt;/PRE&gt;&lt;/DIV&gt;
&lt;H1 onclick="if (Browse.style.display=='none') Browse.style.display='inline'; else Browse.style.display='none';" style="CURSOR: hand"&gt;Time navigation functions&lt;/H1&gt;
&lt;DIV id=Browse class=function style="DISPLAY: none"&gt;
&lt;H2&gt;Begin&lt;/H2&gt;
&lt;H4&gt;First image &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Go to the first image for the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.Begin()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.Begin()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.Begin();
&lt;/PRE&gt;
&lt;H2&gt;End&lt;/H2&gt;
&lt;H4&gt;Latest image &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Go to the last image for the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.End()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.End()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.End();
&lt;/PRE&gt;
&lt;H2&gt;GetDate&lt;/H2&gt;
&lt;H4&gt;Return current playback date and time &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Browse_GetDate_return.value = SCS.Browse.GetDate();}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Browse_GetDate_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Browse.GetDate())" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Browse.GetDate();
&lt;/PRE&gt;
&lt;H2&gt;Goto&lt;/H2&gt;
&lt;H4&gt;Go to specific time &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Go to a specific time for the selected camera.
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.Goto(dateTime);
&lt;/PRE&gt;
&lt;H2&gt;Next&lt;/H2&gt;
&lt;H4&gt;Next image &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Go to the next image for the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.Next()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.Next()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.Next();
&lt;/PRE&gt;
&lt;H2&gt;NextSequence&lt;/H2&gt;
&lt;H4&gt;Next sequence &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Go to the next sequence for the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.NextSequence()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.NextSequence()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.NextSequence();
&lt;/PRE&gt;
&lt;H2&gt;PlayForward&lt;/H2&gt;
&lt;H4&gt;Start forward playback &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.PlayForward()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.PlayForward()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.PlayForward();
&lt;/PRE&gt;
&lt;H2&gt;PlayReverse&lt;/H2&gt;
&lt;H4&gt;Start reverse playback &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.PlayReverse()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.PlayReverse()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.PlayReverse();
&lt;/PRE&gt;
&lt;H2&gt;PlayStop&lt;/H2&gt;
&lt;H4&gt;Stop playback &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.PlayStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.PlayStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.PlayStop();
&lt;/PRE&gt;
&lt;H2&gt;Previous&lt;/H2&gt;
&lt;H4&gt;Previous image &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Go to the previous image for the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.Previous()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.Previous()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.Previous();
&lt;/PRE&gt;
&lt;H2&gt;PreviousSequence&lt;/H2&gt;
&lt;H4&gt;Previous sequence &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Go to the previous sequence for the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.PreviousSequence()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.PreviousSequence()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.PreviousSequence();
&lt;/PRE&gt;
&lt;H2&gt;SetPlayBackSpeed&lt;/H2&gt;
&lt;H4&gt;Set playback speed &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;speed: &lt;INPUT id=Browse_SetPlayBackSpeed_speed class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Browse.SetPlayBackSpeed(parseFloat(Browse_SetPlayBackSpeed_speed.value))}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="speed" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.Browse.SetPlayBackSpeed(parseFloat(speed.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Browse.SetPlayBackSpeed(speed);
&lt;/PRE&gt;&lt;/DIV&gt;
&lt;H1 onclick="if (Camera.style.display=='none') Camera.style.display='inline'; else Camera.style.display='none';" style="CURSOR: hand"&gt;Camera functions&lt;/H1&gt;
&lt;DIV id=Camera class=function style="DISPLAY: none"&gt;
&lt;H2&gt;ClearAllSignalsOnAllCamerasInSelectedView&lt;/H2&gt;
&lt;H4&gt;Clear all indicators on all cameras in the selected window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.ClearAllSignalsOnAllCamerasInSelectedView()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.ClearAllSignalsOnAllCamerasInSelectedView()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.ClearAllSignalsOnAllCamerasInSelectedView();
&lt;/PRE&gt;
&lt;H2&gt;ClearAllSignalsOnSelectedCamera&lt;/H2&gt;
&lt;H4&gt;Clear all indicators on selected camera &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.ClearAllSignalsOnSelectedCamera()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.ClearAllSignalsOnSelectedCamera()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.ClearAllSignalsOnSelectedCamera();
&lt;/PRE&gt;
&lt;H2&gt;ClearEventOccurredSignalOnAllCamerasInSelectedView&lt;/H2&gt;
&lt;H4&gt;Clear event indicator on all cameras in the selected window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.ClearEventOccurredSignalOnAllCamerasInSelectedView()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.ClearEventOccurredSignalOnAllCamerasInSelectedView()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.ClearEventOccurredSignalOnAllCamerasInSelectedView();
&lt;/PRE&gt;
&lt;H2&gt;ClearEventOccurredSignalOnSelectedCamera&lt;/H2&gt;
&lt;H4&gt;Clear event indicator on the selected camera &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.ClearEventOccurredSignalOnSelectedCamera()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.ClearEventOccurredSignalOnSelectedCamera()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.ClearEventOccurredSignalOnSelectedCamera();
&lt;/PRE&gt;
&lt;H2&gt;ClearMotionOccurredSignalOnAllCamerasInSelectedView&lt;/H2&gt;
&lt;H4&gt;Clear motion indicator on all cameras in the selected window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.ClearMotionOccurredSignalOnAllCamerasInSelectedView()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.ClearMotionOccurredSignalOnAllCamerasInSelectedView()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.ClearMotionOccurredSignalOnAllCamerasInSelectedView();
&lt;/PRE&gt;
&lt;H2&gt;ClearMotionOccurredSignalOnSelectedCamera&lt;/H2&gt;
&lt;H4&gt;Clear motion indicator on the selected camera &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.ClearMotionOccurredSignalOnSelectedCamera()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.ClearMotionOccurredSignalOnSelectedCamera()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.ClearMotionOccurredSignalOnSelectedCamera();
&lt;/PRE&gt;
&lt;H2&gt;RemovablePrivacyMaskLift&lt;/H2&gt;
&lt;H4&gt;Lift privacy masks &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.RemovablePrivacyMaskLift()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.RemovablePrivacyMaskLift()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.RemovablePrivacyMaskLift();
&lt;/PRE&gt;
&lt;H2&gt;RemovablePrivacyMaskToggle&lt;/H2&gt;
&lt;H4&gt;Toggle privacy masks &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.RemovablePrivacyMaskToggle()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.RemovablePrivacyMaskToggle()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.RemovablePrivacyMaskToggle();
&lt;/PRE&gt;
&lt;H2&gt;RemovablePrivacyMaskUnlift&lt;/H2&gt;
&lt;H4&gt;Apply privacy masks &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.RemovablePrivacyMaskUnlift()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.RemovablePrivacyMaskUnlift()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.RemovablePrivacyMaskUnlift();
&lt;/PRE&gt;
&lt;H2&gt;SnapshotSelectedViewItem&lt;/H2&gt;
&lt;H4&gt;Create snapshot &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Creates a snapshot from the selected view item if supported.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.SnapshotSelectedViewItem()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.SnapshotSelectedViewItem()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.SnapshotSelectedViewItem();
&lt;/PRE&gt;
&lt;H2&gt;StartRecordingOnSelectedCamera&lt;/H2&gt;
&lt;H4&gt;Start recording on selected camera &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.StartRecordingOnSelectedCamera()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.StartRecordingOnSelectedCamera()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.StartRecordingOnSelectedCamera();
&lt;/PRE&gt;
&lt;H2&gt;StopRecordingOnSelectedCamera&lt;/H2&gt;
&lt;H4&gt;Stop recording on selected camera &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.StopRecordingOnSelectedCamera()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.StopRecordingOnSelectedCamera()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.StopRecordingOnSelectedCamera();
&lt;/PRE&gt;
&lt;H2&gt;ToggleRecordingOnSelectedCamera&lt;/H2&gt;
&lt;H4&gt;Toggle recording on selected camera &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Camera.ToggleRecordingOnSelectedCamera()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Camera.ToggleRecordingOnSelectedCamera()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Camera.ToggleRecordingOnSelectedCamera();
&lt;/PRE&gt;&lt;/DIV&gt;
&lt;H1 onclick="if (Events.style.display=='none') Events.style.display='inline'; else Events.style.display='none';" style="CURSOR: hand"&gt;Events functions&lt;/H1&gt;
&lt;DIV id=Events class=function style="DISPLAY: none"&gt;
&lt;H2&gt;MS3.All_EventTypes__Corporate_.MakeAlarm&lt;/H2&gt;
&lt;H4&gt;Activate event: MS3.All EventTypes (Corporate).MakeAlarm &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Events.All.MS3.All_EventTypes__Corporate_.MakeAlarm()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Events.All.MS3.All_EventTypes__Corporate_.MakeAlarm()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Events.All.MS3.All_EventTypes__Corporate_.MakeAlarm();
&lt;/PRE&gt;
&lt;H3&gt;Remark&lt;/H3&gt;
&lt;P&gt;This action cannot be activated from startup scripts.&lt;/P&gt;&lt;/DIV&gt;
&lt;H1 onclick="if (General.style.display=='none') General.style.display='inline'; else General.style.display='none';" style="CURSOR: hand"&gt;General functions&lt;/H1&gt;
&lt;DIV id=General class=function style="DISPLAY: none"&gt;
&lt;H2&gt;ActivateEvent&lt;/H2&gt;
&lt;H4&gt;Activate event &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Activates the specified event.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;eventName: &lt;INPUT id=General_ActivateEvent_eventName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.General.ActivateEvent(General_ActivateEvent_eventName.value)}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="eventName" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.General.ActivateEvent(eventName.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.General.ActivateEvent(eventName);
&lt;/PRE&gt;
&lt;H2&gt;ActivateEventNotify&lt;/H2&gt;
&lt;H4&gt;Activate event &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Activates the specified event.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;eventName: &lt;INPUT id=General_ActivateEventNotify_eventName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.General.ActivateEventNotify(General_ActivateEventNotify_eventName.value)}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="eventName" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.General.ActivateEventNotify(eventName.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.General.ActivateEventNotify(eventName);
&lt;/PRE&gt;
&lt;H2&gt;ActivateOutput&lt;/H2&gt;
&lt;H4&gt;Activate output &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Activates the specified output.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;outputName: &lt;INPUT id=General_ActivateOutput_outputName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.General.ActivateOutput(General_ActivateOutput_outputName.value)}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="outputName" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.General.ActivateOutput(outputName.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.General.ActivateOutput(outputName);
&lt;/PRE&gt;
&lt;H2&gt;ActivateOutputNotify&lt;/H2&gt;
&lt;H4&gt;Activate output &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Activates the specified output.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;outputName: &lt;INPUT id=General_ActivateOutputNotify_outputName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.General.ActivateOutputNotify(General_ActivateOutputNotify_outputName.value)}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="outputName" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.General.ActivateOutputNotify(outputName.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.General.ActivateOutputNotify(outputName);
&lt;/PRE&gt;&lt;/DIV&gt;
&lt;H1 onclick="if (MultiWindow.style.display=='none') MultiWindow.style.display='inline'; else MultiWindow.style.display='none';" style="CURSOR: hand"&gt;Detached windows functions&lt;/H1&gt;
&lt;DIV id=MultiWindow class=function style="DISPLAY: none"&gt;
&lt;H2&gt;MultiWindowCloseAllWindows&lt;/H2&gt;
&lt;H4&gt;Close all detached windows &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.MultiWindow.MultiWindowCloseAllWindows()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.MultiWindow.MultiWindowCloseAllWindows()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.MultiWindow.MultiWindowCloseAllWindows();
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowCloseWindow&lt;/H2&gt;
&lt;H4&gt;Close a detached window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowId: &lt;INPUT id=MultiWindow_MultiWindowCloseWindow_windowId class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.MultiWindow.MultiWindowCloseWindow(MultiWindow_MultiWindowCloseWindow_windowId.value)}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowId" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.MultiWindow.MultiWindowCloseWindow(windowId.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.MultiWindow.MultiWindowCloseWindow(windowId);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowGetAllWindowIds&lt;/H2&gt;
&lt;H4&gt;Return the IDs of all detached windows &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowGetAllWindowIds();
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowGetDisplayedViewId&lt;/H2&gt;
&lt;H4&gt;Return the view ID of a specified detached window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowId: &lt;INPUT id=MultiWindow_MultiWindowGetDisplayedViewId_windowId class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowGetDisplayedViewId_return.value = SCS.MultiWindow.MultiWindowGetDisplayedViewId(MultiWindow_MultiWindowGetDisplayedViewId_windowId.value);}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowGetDisplayedViewId_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowId" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowGetDisplayedViewId(windowId.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowGetDisplayedViewId(windowId);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowGetFloatingWindowIds&lt;/H2&gt;
&lt;H4&gt;Return the IDs of all floating windows &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowGetFloatingWindowIds();
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowGetFullScreenWindowIds&lt;/H2&gt;
&lt;H4&gt;Return the IDs of all full screen windows &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowGetFullScreenWindowIds();
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowGetScreenCount&lt;/H2&gt;
&lt;H4&gt;Get number of available screens &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowGetScreenCount_return.value = SCS.MultiWindow.MultiWindowGetScreenCount();}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowGetScreenCount_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowGetScreenCount())" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowGetScreenCount();
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowMaximizeFloatingWindow&lt;/H2&gt;
&lt;H4&gt;Maximize a floating window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowId: &lt;INPUT id=MultiWindow_MultiWindowMaximizeFloatingWindow_windowId class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowMaximizeFloatingWindow_return.value = SCS.MultiWindow.MultiWindowMaximizeFloatingWindow(MultiWindow_MultiWindowMaximizeFloatingWindow_windowId.value);}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowMaximizeFloatingWindow_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowId" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowMaximizeFloatingWindow(windowId.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowMaximizeFloatingWindow(windowId);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowMinimizeFloatingWindow&lt;/H2&gt;
&lt;H4&gt;Minimize a floating window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowId: &lt;INPUT id=MultiWindow_MultiWindowMinimizeFloatingWindow_windowId class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowMinimizeFloatingWindow_return.value = SCS.MultiWindow.MultiWindowMinimizeFloatingWindow(MultiWindow_MultiWindowMinimizeFloatingWindow_windowId.value);}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowMinimizeFloatingWindow_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowId" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowMinimizeFloatingWindow(windowId.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowMinimizeFloatingWindow(windowId);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowOpenFloatingWindow&lt;/H2&gt;
&lt;H4&gt;Open a floating window displaying a view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;viewName: &lt;INPUT id=MultiWindow_MultiWindowOpenFloatingWindow_viewName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;x: &lt;INPUT id=MultiWindow_MultiWindowOpenFloatingWindow_x class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;y: &lt;INPUT id=MultiWindow_MultiWindowOpenFloatingWindow_y class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;width: &lt;INPUT id=MultiWindow_MultiWindowOpenFloatingWindow_width class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;height: &lt;INPUT id=MultiWindow_MultiWindowOpenFloatingWindow_height class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowOpenFloatingWindow_return.value = SCS.MultiWindow.MultiWindowOpenFloatingWindow(MultiWindow_MultiWindowOpenFloatingWindow_viewName.value, parseInt(MultiWindow_MultiWindowOpenFloatingWindow_x.value), parseInt(MultiWindow_MultiWindowOpenFloatingWindow_y.value), parseInt(MultiWindow_MultiWindowOpenFloatingWindow_width.value), parseInt(MultiWindow_MultiWindowOpenFloatingWindow_height.value));}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowOpenFloatingWindow_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="viewName" /&amp;gt;
&amp;lt;input type="text" id="x" /&amp;gt;
&amp;lt;input type="text" id="y" /&amp;gt;
&amp;lt;input type="text" id="width" /&amp;gt;
&amp;lt;input type="text" id="height" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowOpenFloatingWindow(viewName.value, parseInt(x.value), parseInt(y.value), parseInt(width.value), parseInt(height.value)))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowOpenFloatingWindow(viewName, x, y, width, height);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowOpenFullScreenWindow&lt;/H2&gt;
&lt;H4&gt;Open a full screen window displaying a view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;viewName: &lt;INPUT id=MultiWindow_MultiWindowOpenFullScreenWindow_viewName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;screenIndex: &lt;INPUT id=MultiWindow_MultiWindowOpenFullScreenWindow_screenIndex class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowOpenFullScreenWindow_return.value = SCS.MultiWindow.MultiWindowOpenFullScreenWindow(MultiWindow_MultiWindowOpenFullScreenWindow_viewName.value, parseInt(MultiWindow_MultiWindowOpenFullScreenWindow_screenIndex.value));}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowOpenFullScreenWindow_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="viewName" /&amp;gt;
&amp;lt;input type="text" id="screenIndex" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowOpenFullScreenWindow(viewName.value, parseInt(screenIndex.value)))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowOpenFullScreenWindow(viewName, screenIndex);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowRestoreFloatingWindow&lt;/H2&gt;
&lt;H4&gt;Restore a floating window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowId: &lt;INPUT id=MultiWindow_MultiWindowRestoreFloatingWindow_windowId class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowRestoreFloatingWindow_return.value = SCS.MultiWindow.MultiWindowRestoreFloatingWindow(MultiWindow_MultiWindowRestoreFloatingWindow_windowId.value);}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowRestoreFloatingWindow_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowId" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowRestoreFloatingWindow(windowId.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowRestoreFloatingWindow(windowId);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowSetDisplayedView&lt;/H2&gt;
&lt;H4&gt;Set the displayed view of a detached window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowId: &lt;INPUT id=MultiWindow_MultiWindowSetDisplayedView_windowId class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;viewName: &lt;INPUT id=MultiWindow_MultiWindowSetDisplayedView_viewName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowSetDisplayedView_return.value = SCS.MultiWindow.MultiWindowSetDisplayedView(MultiWindow_MultiWindowSetDisplayedView_windowId.value, MultiWindow_MultiWindowSetDisplayedView_viewName.value);}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowSetDisplayedView_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowId" /&amp;gt;
&amp;lt;input type="text" id="viewName" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowSetDisplayedView(windowId.value, viewName.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowSetDisplayedView(windowId, viewName);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowSetFloatingWindowLocation&lt;/H2&gt;
&lt;H4&gt;Set the location of a floating window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowId: &lt;INPUT id=MultiWindow_MultiWindowSetFloatingWindowLocation_windowId class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;x: &lt;INPUT id=MultiWindow_MultiWindowSetFloatingWindowLocation_x class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;y: &lt;INPUT id=MultiWindow_MultiWindowSetFloatingWindowLocation_y class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowSetFloatingWindowLocation_return.value = SCS.MultiWindow.MultiWindowSetFloatingWindowLocation(MultiWindow_MultiWindowSetFloatingWindowLocation_windowId.value, parseInt(MultiWindow_MultiWindowSetFloatingWindowLocation_x.value), parseInt(MultiWindow_MultiWindowSetFloatingWindowLocation_y.value));}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowSetFloatingWindowLocation_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowId" /&amp;gt;
&amp;lt;input type="text" id="x" /&amp;gt;
&amp;lt;input type="text" id="y" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowSetFloatingWindowLocation(windowId.value, parseInt(x.value), parseInt(y.value)))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowSetFloatingWindowLocation(windowId, x, y);
&lt;/PRE&gt;
&lt;H2&gt;MultiWindowSetFloatingWindowSize&lt;/H2&gt;
&lt;H4&gt;Set the size of a floating window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowId: &lt;INPUT id=MultiWindow_MultiWindowSetFloatingWindowSize_windowId class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;width: &lt;INPUT id=MultiWindow_MultiWindowSetFloatingWindowSize_width class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;height: &lt;INPUT id=MultiWindow_MultiWindowSetFloatingWindowSize_height class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{MultiWindow_MultiWindowSetFloatingWindowSize_return.value = SCS.MultiWindow.MultiWindowSetFloatingWindowSize(MultiWindow_MultiWindowSetFloatingWindowSize_windowId.value, parseInt(MultiWindow_MultiWindowSetFloatingWindowSize_width.value), parseInt(MultiWindow_MultiWindowSetFloatingWindowSize_height.value));}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=MultiWindow_MultiWindowSetFloatingWindowSize_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowId" /&amp;gt;
&amp;lt;input type="text" id="width" /&amp;gt;
&amp;lt;input type="text" id="height" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.MultiWindow.MultiWindowSetFloatingWindowSize(windowId.value, parseInt(width.value), parseInt(height.value)))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.MultiWindow.MultiWindowSetFloatingWindowSize(windowId, width, height);
&lt;/PRE&gt;&lt;/DIV&gt;
&lt;H1 onclick="if (Ptz.style.display=='none') Ptz.style.display='inline'; else Ptz.style.display='none';" style="CURSOR: hand"&gt;PTZ functions&lt;/H1&gt;
&lt;DIV id=Ptz class=function style="DISPLAY: none"&gt;
&lt;H2&gt;EnableDigitalZoom&lt;/H2&gt;
&lt;H4&gt;Enable the digital zoom &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Enables or disables digital zoom.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;enable: &lt;INPUT id=Ptz_EnableDigitalZoom_enable class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.EnableDigitalZoom(Ptz_EnableDigitalZoom_enable.value)}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="enable" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.EnableDigitalZoom(enable.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.EnableDigitalZoom(enable);
&lt;/PRE&gt;
&lt;H2&gt;Preset&lt;/H2&gt;
&lt;H4&gt;Set camera PTZ preset &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Activates preset on the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;preset: &lt;INPUT id=Ptz_Preset_preset class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.Preset(Ptz_Preset_preset.value)}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="preset" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.Preset(preset.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.Preset(preset);
&lt;/PRE&gt;
&lt;H2&gt;PtzAux1&lt;/H2&gt;
&lt;H4&gt;Aux 1 on while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux1()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux1()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux1();
&lt;/PRE&gt;
&lt;H4&gt;Aux 1 on while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux1Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux1Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux1Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux1Off&lt;/H2&gt;
&lt;H4&gt;Aux 1 off &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux1Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux1Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux1Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux1On&lt;/H2&gt;
&lt;H4&gt;Aux 1 on &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux1On()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux1On()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux1On();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux2&lt;/H2&gt;
&lt;H4&gt;Aux 2 on while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux2()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux2()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux2();
&lt;/PRE&gt;
&lt;H4&gt;Aux 2 on while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux2Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux2Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux2Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux2Off&lt;/H2&gt;
&lt;H4&gt;Aux 2 off &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux2Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux2Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux2Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux2On&lt;/H2&gt;
&lt;H4&gt;Aux 2 on &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux2On()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux2On()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux2On();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux3&lt;/H2&gt;
&lt;H4&gt;Aux 3 on while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux3()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux3()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux3();
&lt;/PRE&gt;
&lt;H4&gt;Aux 3 on while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux3Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux3Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux3Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux3Off&lt;/H2&gt;
&lt;H4&gt;Aux 3 off &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux3Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux3Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux3Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux3On&lt;/H2&gt;
&lt;H4&gt;Aux 3 on &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux3On()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux3On()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux3On();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux4&lt;/H2&gt;
&lt;H4&gt;Aux 4 on while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux4()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux4()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux4();
&lt;/PRE&gt;
&lt;H4&gt;Aux 4 on while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux4Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux4Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux4Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux4Off&lt;/H2&gt;
&lt;H4&gt;Aux 4 off &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux4Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux4Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux4Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux4On&lt;/H2&gt;
&lt;H4&gt;Aux 4 on &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux4On()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux4On()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux4On();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux5&lt;/H2&gt;
&lt;H4&gt;Aux 5 on while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux5()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux5()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux5();
&lt;/PRE&gt;
&lt;H4&gt;Aux 5 on while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux5Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux5Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux5Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux5Off&lt;/H2&gt;
&lt;H4&gt;Aux 5 off &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux5Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux5Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux5Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux5On&lt;/H2&gt;
&lt;H4&gt;Aux 5 on &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux5On()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux5On()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux5On();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux6&lt;/H2&gt;
&lt;H4&gt;Aux 6 on while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux6()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux6()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux6();
&lt;/PRE&gt;
&lt;H4&gt;Aux 6 on while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux6Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux6Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux6Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux6Off&lt;/H2&gt;
&lt;H4&gt;Aux 6 off &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux6Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux6Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux6Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux6On&lt;/H2&gt;
&lt;H4&gt;Aux 6 on &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux6On()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux6On()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux6On();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux7&lt;/H2&gt;
&lt;H4&gt;Aux 7 on while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux7()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux7()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux7();
&lt;/PRE&gt;
&lt;H4&gt;Aux 7 on while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux7Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux7Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux7Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux7Off&lt;/H2&gt;
&lt;H4&gt;Aux 7 off &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux7Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux7Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux7Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux7On&lt;/H2&gt;
&lt;H4&gt;Aux 7 on &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux7On()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux7On()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux7On();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux8&lt;/H2&gt;
&lt;H4&gt;Aux 8 on while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux8()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux8()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux8();
&lt;/PRE&gt;
&lt;H4&gt;Aux 8 on while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux8Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux8Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux8Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux8Off&lt;/H2&gt;
&lt;H4&gt;Aux 8 off &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux8Off()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux8Off()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux8Off();
&lt;/PRE&gt;
&lt;H2&gt;PtzAux8On&lt;/H2&gt;
&lt;H4&gt;Aux 8 on &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzAux8On()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzAux8On()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzAux8On();
&lt;/PRE&gt;
&lt;H2&gt;PtzFocusAuto&lt;/H2&gt;
&lt;H4&gt;Activate focus auto &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzFocusAuto()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzFocusAuto()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzFocusAuto();
&lt;/PRE&gt;
&lt;H2&gt;PtzFocusDownStart&lt;/H2&gt;
&lt;H4&gt;Focus far start &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzFocusDownStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzFocusDownStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzFocusDownStart();
&lt;/PRE&gt;
&lt;H2&gt;PtzFocusStop&lt;/H2&gt;
&lt;H4&gt;Focus stop &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzFocusStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzFocusStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzFocusStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzFocusUpStart&lt;/H2&gt;
&lt;H4&gt;Focus near start &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzFocusUpStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzFocusUpStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzFocusUpStart();
&lt;/PRE&gt;
&lt;H2&gt;PtzGainDown&lt;/H2&gt;
&lt;H4&gt;Gain down &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzGainDown()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzGainDown()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzGainDown();
&lt;/PRE&gt;
&lt;H2&gt;PtzGainReset&lt;/H2&gt;
&lt;H4&gt;Gain reset &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzGainReset()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzGainReset()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzGainReset();
&lt;/PRE&gt;
&lt;H2&gt;PtzGainUp&lt;/H2&gt;
&lt;H4&gt;Gain up &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzGainUp()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzGainUp()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzGainUp();
&lt;/PRE&gt;
&lt;H2&gt;PtzIrisDown&lt;/H2&gt;
&lt;H4&gt;Iris down &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzIrisDown()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzIrisDown()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzIrisDown();
&lt;/PRE&gt;
&lt;H2&gt;PtzIrisReset&lt;/H2&gt;
&lt;H4&gt;Iris reset &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzIrisReset()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzIrisReset()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzIrisReset();
&lt;/PRE&gt;
&lt;H2&gt;PtzIrisUp&lt;/H2&gt;
&lt;H4&gt;Iris up &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzIrisUp()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzIrisUp()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzIrisUp();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousDownLeftStart&lt;/H2&gt;
&lt;H4&gt;Move down-left while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousDownLeftStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousDownLeftStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousDownLeftStart();
&lt;/PRE&gt;
&lt;H4&gt;Move down-left while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousDownLeftStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousDownLeftStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousDownLeftStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousDownRightStart&lt;/H2&gt;
&lt;H4&gt;Move down-right while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousDownRightStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousDownRightStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousDownRightStart();
&lt;/PRE&gt;
&lt;H4&gt;Move down-right while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousDownRightStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousDownRightStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousDownRightStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousDownStart&lt;/H2&gt;
&lt;H4&gt;Move down while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousDownStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousDownStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousDownStart();
&lt;/PRE&gt;
&lt;H4&gt;Move down while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousDownStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousDownStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousDownStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousLeftStart&lt;/H2&gt;
&lt;H4&gt;Move left while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousLeftStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousLeftStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousLeftStart();
&lt;/PRE&gt;
&lt;H4&gt;Move left while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousLeftStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousLeftStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousLeftStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousRightStart&lt;/H2&gt;
&lt;H4&gt;Move right while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousRightStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousRightStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousRightStart();
&lt;/PRE&gt;
&lt;H4&gt;Move right while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousRightStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousRightStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousRightStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousUpLeftStart&lt;/H2&gt;
&lt;H4&gt;Move up-left while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousUpLeftStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousUpLeftStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousUpLeftStart();
&lt;/PRE&gt;
&lt;H4&gt;Move up-left while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousUpLeftStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousUpLeftStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousUpLeftStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousUpRightStart&lt;/H2&gt;
&lt;H4&gt;Move up-right while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousUpRightStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousUpRightStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousUpRightStart();
&lt;/PRE&gt;
&lt;H4&gt;Move up-right while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousUpRightStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousUpRightStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousUpRightStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousUpStart&lt;/H2&gt;
&lt;H4&gt;Move up while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousUpStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousUpStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousUpStart();
&lt;/PRE&gt;
&lt;H4&gt;Move up while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousUpStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousUpStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousUpStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousZoomInStart&lt;/H2&gt;
&lt;H4&gt;Zoom in while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousZoomInStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousZoomInStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousZoomInStart();
&lt;/PRE&gt;
&lt;H4&gt;Zoom in while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousZoomInStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousZoomInStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousZoomInStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveContinuousZoomOutStart&lt;/H2&gt;
&lt;H4&gt;Zoom out while pressing - Option 1&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera while pressing.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousZoomOutStart()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousZoomOutStart()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousZoomOutStart();
&lt;/PRE&gt;
&lt;H4&gt;Zoom out while pressing - Option 2&lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveContinuousZoomOutStop()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveContinuousZoomOutStop()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveContinuousZoomOutStop();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveDown&lt;/H2&gt;
&lt;H4&gt;Move down &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveDown()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveDown()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveDown();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveDownLeft&lt;/H2&gt;
&lt;H4&gt;Move down-left &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveDownLeft()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveDownLeft()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveDownLeft();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveDownRight&lt;/H2&gt;
&lt;H4&gt;Move down-right &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveDownRight()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveDownRight()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveDownRight();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveHome&lt;/H2&gt;
&lt;H4&gt;Move home &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveHome()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveHome()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveHome();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveLeft&lt;/H2&gt;
&lt;H4&gt;Move left &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveLeft()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveLeft()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveLeft();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveRight&lt;/H2&gt;
&lt;H4&gt;Move right &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveRight()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveRight()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveRight();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveUp&lt;/H2&gt;
&lt;H4&gt;Move up &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveUp()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveUp()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveUp();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveUpLeft&lt;/H2&gt;
&lt;H4&gt;Move up-left &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveUpLeft()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveUpLeft()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveUpLeft();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveUpRight&lt;/H2&gt;
&lt;H4&gt;Move up-right &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveUpRight()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveUpRight()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveUpRight();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveZoomIn&lt;/H2&gt;
&lt;H4&gt;Zoom in &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveZoomIn()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveZoomIn()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveZoomIn();
&lt;/PRE&gt;
&lt;H2&gt;PtzMoveZoomOut&lt;/H2&gt;
&lt;H4&gt;Zoom out &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Moves the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzMoveZoomOut()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzMoveZoomOut()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzMoveZoomOut();
&lt;/PRE&gt;
&lt;H2&gt;PtzPausePatrolling&lt;/H2&gt;
&lt;H4&gt;Pause patrolling &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Pause patrolling on the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzPausePatrolling()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzPausePatrolling()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzPausePatrolling();
&lt;/PRE&gt;
&lt;H2&gt;PtzRelease&lt;/H2&gt;
&lt;H4&gt;Release &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Release the PTZ session on the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzRelease()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzRelease()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzRelease();
&lt;/PRE&gt;
&lt;H2&gt;PtzReserve&lt;/H2&gt;
&lt;H4&gt;Reserve &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Reserves the PTZ session on the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzReserve()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzReserve()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzReserve();
&lt;/PRE&gt;
&lt;H2&gt;PtzShutterDown&lt;/H2&gt;
&lt;H4&gt;Shutter down &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzShutterDown()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzShutterDown()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzShutterDown();
&lt;/PRE&gt;
&lt;H2&gt;PtzShutterReset&lt;/H2&gt;
&lt;H4&gt;Shutter reset &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzShutterReset()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzShutterReset()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzShutterReset();
&lt;/PRE&gt;
&lt;H2&gt;PtzShutterUp&lt;/H2&gt;
&lt;H4&gt;Shutter up &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.PtzShutterUp()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.PtzShutterUp()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.PtzShutterUp();
&lt;/PRE&gt;
&lt;H2&gt;ToggleDigitalZoomEnableState&lt;/H2&gt;
&lt;H4&gt;Toggle the digital zoom state &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Enters and leaves the digital zoom state for the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Ptz.ToggleDigitalZoomEnableState()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Ptz.ToggleDigitalZoomEnableState()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Ptz.ToggleDigitalZoomEnableState();
&lt;/PRE&gt;&lt;/DIV&gt;
&lt;H1 onclick="if (Views.style.display=='none') Views.style.display='inline'; else Views.style.display='none';" style="CURSOR: hand"&gt;Views functions&lt;/H1&gt;
&lt;DIV id=Views class=function style="DISPLAY: none"&gt;
&lt;H2&gt;Private.New_Group.New_View__1_x_1_&lt;/H2&gt;
&lt;H4&gt;Select the view 'New View (1 x 1)' in 'Private.New Group' &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.All.Private.New_Group.New_View__1_x_1_()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.All.Private.New_Group.New_View__1_x_1_()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.All.Private.New_Group.New_View__1_x_1_();
&lt;/PRE&gt;
&lt;H3&gt;Remark&lt;/H3&gt;
&lt;P&gt;This action cannot be activated from startup scripts.&lt;/P&gt;
&lt;H2&gt;smart_walls.Test_Smart_Wall.Monitor_1&lt;/H2&gt;
&lt;H4&gt;Select the view 'Monitor 1' in 'smart walls.Test Smart Wall' &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.All.smart_walls.Test_Smart_Wall.Monitor_1()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.All.smart_walls.Test_Smart_Wall.Monitor_1()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.All.smart_walls.Test_Smart_Wall.Monitor_1();
&lt;/PRE&gt;
&lt;H3&gt;Remark&lt;/H3&gt;
&lt;P&gt;This action cannot be activated from startup scripts.&lt;/P&gt;
&lt;H2&gt;smart_walls.Test_Smart_Wall.Monitor_2&lt;/H2&gt;
&lt;H4&gt;Select the view 'Monitor 2' in 'smart walls.Test Smart Wall' &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.All.smart_walls.Test_Smart_Wall.Monitor_2()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.All.smart_walls.Test_Smart_Wall.Monitor_2()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.All.smart_walls.Test_Smart_Wall.Monitor_2();
&lt;/PRE&gt;
&lt;H3&gt;Remark&lt;/H3&gt;
&lt;P&gt;This action cannot be activated from startup scripts.&lt;/P&gt;
&lt;H2&gt;Testing.Browsers.New_View__2_x_2_&lt;/H2&gt;
&lt;H4&gt;Select the view 'New View (2 x 2)' in 'Testing.Browsers' &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.All.Testing.Browsers.New_View__2_x_2_()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.All.Testing.Browsers.New_View__2_x_2_()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.All.Testing.Browsers.New_View__2_x_2_();
&lt;/PRE&gt;
&lt;H3&gt;Remark&lt;/H3&gt;
&lt;P&gt;This action cannot be activated from startup scripts.&lt;/P&gt;
&lt;H2&gt;Testing.Captis.New_View__2_x_2_&lt;/H2&gt;
&lt;H4&gt;Select the view 'New View (2 x 2)' in 'Testing.Captis' &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.All.Testing.Captis.New_View__2_x_2_()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.All.Testing.Captis.New_View__2_x_2_()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.All.Testing.Captis.New_View__2_x_2_();
&lt;/PRE&gt;
&lt;H3&gt;Remark&lt;/H3&gt;
&lt;P&gt;This action cannot be activated from startup scripts.&lt;/P&gt;
&lt;H2&gt;CopySelectedCameraViewItem&lt;/H2&gt;
&lt;H4&gt;Copy the selected camera view item &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Copies the selected camera view item to a specified window and view item. Enter the parameters: window number; view item number.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowNumber: &lt;INPUT id=Views_CopySelectedCameraViewItem_windowNumber class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;viewNumber: &lt;INPUT id=Views_CopySelectedCameraViewItem_viewNumber class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{SCS.Views.CopySelectedCameraViewItem(parseInt(Views_CopySelectedCameraViewItem_windowNumber.value), parseInt(Views_CopySelectedCameraViewItem_viewNumber.value))}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowNumber" /&amp;gt;
&amp;lt;input type="text" id="viewNumber" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.CopySelectedCameraViewItem(parseInt(windowNumber.value), parseInt(viewNumber.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.CopySelectedCameraViewItem(windowNumber, viewNumber);
&lt;/PRE&gt;
&lt;H2&gt;DeselectViewItem&lt;/H2&gt;
&lt;H4&gt;Deselect view item &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Deselect the selected view item in the current view.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.DeselectViewItem()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.DeselectViewItem()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.DeselectViewItem();
&lt;/PRE&gt;
&lt;H2&gt;GetSelectedCameraViewItemShortcut&lt;/H2&gt;
&lt;H4&gt;Return the shortcut for the selected camera view item &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Views_GetSelectedCameraViewItemShortcut_return.value = SCS.Views.GetSelectedCameraViewItemShortcut();}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Views_GetSelectedCameraViewItemShortcut_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Views.GetSelectedCameraViewItemShortcut())" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Views.GetSelectedCameraViewItemShortcut();
&lt;/PRE&gt;
&lt;H2&gt;GetSelectedViewFullName&lt;/H2&gt;
&lt;H4&gt;Get the full name of the selected view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Views_GetSelectedViewFullName_return.value = SCS.Views.GetSelectedViewFullName();}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Views_GetSelectedViewFullName_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Views.GetSelectedViewFullName())" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Views.GetSelectedViewFullName();
&lt;/PRE&gt;
&lt;H2&gt;GetSelectedViewId&lt;/H2&gt;
&lt;H4&gt;Get the ID of the current view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Get the ID of the current view.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Views_GetSelectedViewId_return.value = SCS.Views.GetSelectedViewId();}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Views_GetSelectedViewId_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Views.GetSelectedViewId())" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Views.GetSelectedViewId();
&lt;/PRE&gt;
&lt;H2&gt;GetSelectedViewItemIndex&lt;/H2&gt;
&lt;H4&gt;Return the index for the selected view item &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Views_GetSelectedViewItemIndex_return.value = SCS.Views.GetSelectedViewItemIndex();}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Views_GetSelectedViewItemIndex_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Views.GetSelectedViewItemIndex())" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Views.GetSelectedViewItemIndex();
&lt;/PRE&gt;
&lt;H2&gt;GetViewFullName&lt;/H2&gt;
&lt;H4&gt;Get the full name of a view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Get the full name of the view with the &lt;CODE&gt;index&lt;/CODE&gt;.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;index: &lt;INPUT id=Views_GetViewFullName_index class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Views_GetViewFullName_return.value = SCS.Views.GetViewFullName(parseInt(Views_GetViewFullName_index.value));}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Views_GetViewFullName_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="index" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Views.GetViewFullName(parseInt(index.value)))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Views.GetViewFullName(index);
&lt;/PRE&gt;
&lt;H2&gt;GetViewId&lt;/H2&gt;
&lt;H4&gt;Get the view ID &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Get the view ID of the view with the &lt;CODE&gt;index&lt;/CODE&gt;.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;index: &lt;INPUT id=Views_GetViewId_index class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Views_GetViewId_return.value = SCS.Views.GetViewId(parseInt(Views_GetViewId_index.value));}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Views_GetViewId_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="index" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Views.GetViewId(parseInt(index.value)))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Views.GetViewId(index);
&lt;/PRE&gt;
&lt;H2&gt;GotoNextView&lt;/H2&gt;
&lt;H4&gt;Select the next view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Selects the next view in the view list.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.GotoNextView()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.GotoNextView()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.GotoNextView();
&lt;/PRE&gt;
&lt;H2&gt;GotoPreviousView&lt;/H2&gt;
&lt;H4&gt;Select the previous view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Selects the previous view in the view list.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.GotoPreviousView()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.GotoPreviousView()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.GotoPreviousView();
&lt;/PRE&gt;
&lt;H2&gt;MaximizeSelectedViewItem&lt;/H2&gt;
&lt;H4&gt;Maximize the selected view item &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.MaximizeSelectedViewItem()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.MaximizeSelectedViewItem()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.MaximizeSelectedViewItem();
&lt;/PRE&gt;
&lt;H2&gt;MoveViewItemSelectionDown&lt;/H2&gt;
&lt;H4&gt;Move view item selection down &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.MoveViewItemSelectionDown()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.MoveViewItemSelectionDown()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.MoveViewItemSelectionDown();
&lt;/PRE&gt;
&lt;H2&gt;MoveViewItemSelectionLeft&lt;/H2&gt;
&lt;H4&gt;Move view item selection left &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.MoveViewItemSelectionLeft()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.MoveViewItemSelectionLeft()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.MoveViewItemSelectionLeft();
&lt;/PRE&gt;
&lt;H2&gt;MoveViewItemSelectionRight&lt;/H2&gt;
&lt;H4&gt;Move view item selection right &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.MoveViewItemSelectionRight()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.MoveViewItemSelectionRight()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.MoveViewItemSelectionRight();
&lt;/PRE&gt;
&lt;H2&gt;MoveViewItemSelectionUp&lt;/H2&gt;
&lt;H4&gt;Move view item selection up &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Select the view item above the current selected view item.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.MoveViewItemSelectionUp()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.MoveViewItemSelectionUp()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.MoveViewItemSelectionUp();
&lt;/PRE&gt;
&lt;H2&gt;PrintSelectedViewItem&lt;/H2&gt;
&lt;H4&gt;Print the selected view item &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Prints the selected view item.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.PrintSelectedViewItem()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.PrintSelectedViewItem()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.PrintSelectedViewItem();
&lt;/PRE&gt;
&lt;H2&gt;ReloadCameraItems&lt;/H2&gt;
&lt;H4&gt;Reload view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Reloads the view.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.ReloadCameraItems()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.ReloadCameraItems()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.ReloadCameraItems();
&lt;/PRE&gt;
&lt;H2&gt;RestoreSelectedViewItem&lt;/H2&gt;
&lt;H4&gt;Restore the selected view item &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.RestoreSelectedViewItem()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.RestoreSelectedViewItem()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.RestoreSelectedViewItem();
&lt;/PRE&gt;
&lt;H2&gt;SelectCameraViewItem&lt;/H2&gt;
&lt;H4&gt;Select view item using shortcut &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;shortCut: &lt;INPUT id=Views_SelectCameraViewItem_shortCut class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Views_SelectCameraViewItem_return.value = SCS.Views.SelectCameraViewItem(Views_SelectCameraViewItem_shortCut.value);}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Views_SelectCameraViewItem_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="shortCut" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Views.SelectCameraViewItem(shortCut.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Views.SelectCameraViewItem(shortCut);
&lt;/PRE&gt;
&lt;H2&gt;SelectNextWindow&lt;/H2&gt;
&lt;H4&gt;Select the next window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Selects the next window.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.SelectNextWindow()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.SelectNextWindow()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.SelectNextWindow();
&lt;/PRE&gt;
&lt;H2&gt;SelectView&lt;/H2&gt;
&lt;H4&gt;Select view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;name: &lt;INPUT id=Views_SelectView_name class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.SelectView(Views_SelectView_name.value)}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="name" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.SelectView(name.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.SelectView(name);
&lt;/PRE&gt;
&lt;H2&gt;SelectWindow&lt;/H2&gt;
&lt;H4&gt;Select window &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Selects a specified window. Enter the parameter: windows number.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;windowNumber: &lt;INPUT id=Views_SelectWindow_windowNumber class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.SelectWindow(parseInt(Views_SelectWindow_windowNumber.value))}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="windowNumber" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.SelectWindow(parseInt(windowNumber.value))" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.SelectWindow(windowNumber);
&lt;/PRE&gt;
&lt;H2&gt;SetCameraViewItemCamera&lt;/H2&gt;
&lt;H4&gt;Place a given camera in a given view position &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;viewItemIndex: &lt;INPUT id=Views_SetCameraViewItemCamera_viewItemIndex class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;camera: &lt;INPUT id=Views_SetCameraViewItemCamera_camera class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{SCS.Views.SetCameraViewItemCamera(parseInt(Views_SetCameraViewItemCamera_viewItemIndex.value), Views_SetCameraViewItemCamera_camera.value)}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="viewItemIndex" /&amp;gt;
&amp;lt;input type="text" id="camera" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.SetCameraViewItemCamera(parseInt(viewItemIndex.value), camera.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.SetCameraViewItemCamera(viewItemIndex, camera);
&lt;/PRE&gt;
&lt;H2&gt;ShowCameras&lt;/H2&gt;
&lt;H4&gt;Show cameras in a new view &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Creates a new view with the cameras.
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.ShowCameras(cameras, viewGroupName, groupName, viewName);
&lt;/PRE&gt;
&lt;H2&gt;ShowSingleCamera&lt;/H2&gt;
&lt;H4&gt;Show single camera &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Creates a new 1x1 view with the selected camera.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;camera: &lt;INPUT id=Views_ShowSingleCamera_camera class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;viewGroupName: &lt;INPUT id=Views_ShowSingleCamera_viewGroupName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;groupName: &lt;INPUT id=Views_ShowSingleCamera_groupName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;viewName: &lt;INPUT id=Views_ShowSingleCamera_viewName class=text&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{SCS.Views.ShowSingleCamera(Views_ShowSingleCamera_camera.value, Views_ShowSingleCamera_viewGroupName.value, Views_ShowSingleCamera_groupName.value, Views_ShowSingleCamera_viewName.value)}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="text" id="camera" /&amp;gt;
&amp;lt;input type="text" id="viewGroupName" /&amp;gt;
&amp;lt;input type="text" id="groupName" /&amp;gt;
&amp;lt;input type="text" id="viewName" /&amp;gt;
&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.ShowSingleCamera(camera.value, viewGroupName.value, groupName.value, viewName.value)" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.ShowSingleCamera(camera, viewGroupName, groupName, viewName);
&lt;/PRE&gt;
&lt;H2&gt;ToggleSelectedViewItemMaximizedState&lt;/H2&gt;
&lt;H4&gt;Toggle the maximized state of the selected view item &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Toggles the size of the selected view item.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick=try{SCS.Views.ToggleSelectedViewItemMaximizedState()}catch(e){}finally{} class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="SCS.Views.ToggleSelectedViewItemMaximizedState()" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;SCS.Views.ToggleSelectedViewItemMaximizedState();
&lt;/PRE&gt;
&lt;H2&gt;ViewCount&lt;/H2&gt;
&lt;H4&gt;Get number of views &lt;/H4&gt;
&lt;P class=intro&gt;&lt;/P&gt;
&lt;H3&gt;Purpose&lt;/H3&gt;Get the total number of views in all the groups.
&lt;H3&gt;Test&lt;/H3&gt;To test the operation, click the 'Invoke' button.
&lt;DIV&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;TABLE style="BORDER-COLLAPSE: collapse" borderColor=#dcdcdc cellSpacing=0 cellPadding=4 rules=none frame=box&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;INPUT onclick="try{Views_ViewCount_return.value = SCS.Views.ViewCount();}catch(e){}finally{}" class=button type=button value=Invoke ?&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=right&gt;&lt;B&gt;result&lt;/B&gt;: &lt;INPUT id=Views_ViewCount_return class=text&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;Example&lt;/H3&gt;
&lt;P&gt;The following is an HTML example that creates a button for invoking the action.&lt;/P&gt;&lt;PRE&gt;&amp;lt;input type="button" value="Invoke" onclick="alert(SCS.Views.ViewCount())" &amp;gt;&lt;/PRE&gt;
&lt;H3&gt;Syntax&lt;/H3&gt;&lt;PRE&gt;returnValue = SCS.Views.ViewCount();
&lt;/PRE&gt;&lt;/DIV&gt;
&lt;H1 onclick="if (Other.style.display=='none') Other.style.display='inline'; else Other.style.display='none';" style="CURSOR: hand"&gt;Other functions&lt;/H1&gt;
&lt;DIV id=Other class=function style="DISPLAY: none"&gt;
&lt;P&gt;No functions available.&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;
&lt;SCRIPT id=inline-script&gt;var SCS = new Object();
SCS.General = new Object();
SCS.General.ActivateEvent = new Function("eventName", "var params = new Array(); params.push(eventName); window.external.Do('General.ActivateEvent', params);")
SCS.General.ActivateOutput = new Function("outputName", "var params = new Array(); params.push(outputName); window.external.Do('General.ActivateOutput', params);")
SCS.Application = new Object();
SCS.Application.AddToExport = new Function("var params = new Array(); window.external.Do('Application.AddToExport', params);")
SCS.Application.OutgoingAudioStart = new Function("var params = new Array(); window.external.Do('Application.OutgoingAudioStart', params);")
SCS.Application.OutgoingAudioStop = new Function("var params = new Array(); window.external.Do2('Application.OutgoingAudioStart', params);")
SCS.Browse = new Object();
SCS.Browse.Begin = new Function("var params = new Array(); window.external.Do('Browse.Begin', params);")
SCS.Browse.End = new Function("var params = new Array(); window.external.Do('Browse.End', params);")
SCS.Browse.Goto = new Function("dateTime", "var params = new Array(); params.push(dateTime); window.external.Do('Browse.Goto', params);")
SCS.Browse.Next = new Function("var params = new Array(); window.external.Do('Browse.Next', params);")
SCS.Browse.NextSequence = new Function("var params = new Array(); window.external.Do('Browse.NextSequence', params);")
SCS.Browse.PlayForward = new Function("var params = new Array(); window.external.Do('Browse.PlayForward', params);")
SCS.Browse.PlayReverse = new Function("var params = new Array(); window.external.Do('Browse.PlayReverse', params);")
SCS.Browse.PlayStop = new Function("var params = new Array(); window.external.Do('Browse.PlayStop', params);")
SCS.Browse.Previous = new Function("var params = new Array(); window.external.Do('Browse.Previous', params);")
SCS.Browse.PreviousSequence = new Function("var params = new Array(); window.external.Do('Browse.PreviousSequence', params);")
SCS.Camera = new Object();
SCS.Camera.ClearAllSignalsOnAllCamerasInSelectedView = new Function("view", "var params = new Array(); params.push(view); window.external.Do('Camera.ClearAllSignalsOnAllCamerasInSelectedView', params);")
SCS.Application.Close = new Function("var params = new Array(); window.external.Do('Application.Close', params);")
SCS.Camera.ClearMotionOccurredSignalOnAllCamerasInSelectedView = new Function("view", "var params = new Array(); params.push(view); window.external.Do('Camera.ClearMotionOccurredSignalOnAllCamerasInSelectedView', params);")
SCS.Camera.ClearEventOccurredSignalOnAllCamerasInSelectedView = new Function("view", "var params = new Array(); params.push(view); window.external.Do('Camera.ClearEventOccurredSignalOnAllCamerasInSelectedView', params);")
SCS.Camera.ClearAllSignalsOnSelectedCamera = new Function("viewItem", "var params = new Array(); params.push(viewItem); window.external.Do('Camera.ClearAllSignalsOnSelectedCamera', params);")
SCS.Camera.ClearEventOccurredSignalOnSelectedCamera = new Function("viewItem", "var params = new Array(); params.push(viewItem); window.external.Do('Camera.ClearEventOccurredSignalOnSelectedCamera', params);")
SCS.Camera.ClearMotionOccurredSignalOnSelectedCamera = new Function("viewItem", "var params = new Array(); params.push(viewItem); window.external.Do('Camera.ClearMotionOccurredSignalOnSelectedCamera', params);")
SCS.General.ActivateEventNotify = new Function("eventName", "var params = new Array(); params.push(eventName); window.external.Do('General.ActivateEventNotify', params);")
SCS.General.ActivateOutputNotify = new Function("outputName", "var params = new Array(); params.push(outputName); window.external.Do('General.ActivateOutputNotify', params);")
SCS.Ptz = new Object();
SCS.Ptz.PtzPausePatrolling = new Function("optionalCameraId", "var params = new Array(); params.push(optionalCameraId); window.external.Do('Ptz.PtzPausePatrolling', params);")
SCS.Ptz.PtzRelease = new Function("optionalCameraId", "var params = new Array(); params.push(optionalCameraId); window.external.Do('Ptz.PtzRelease', params);")
SCS.Ptz.PtzReserve = new Function("optionalCameraId", "var params = new Array(); params.push(optionalCameraId); window.external.Do('Ptz.PtzReserve', params);")
SCS.Camera.RemovablePrivacyMaskToggle = new Function("var params = new Array(); window.external.Do('Camera.RemovablePrivacyMaskToggle', params);")
SCS.Camera.RemovablePrivacyMaskUnlift = new Function("var params = new Array(); window.external.Do('Camera.RemovablePrivacyMaskUnlift', params);")
SCS.Application.ShowEvidenceLockDialogViewItem = new Function("var params = new Array(); window.external.Do('Application.ShowEvidenceLockDialogViewItem', params);")
SCS.Ptz.PtzAux3Off = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux3Off', params);")
SCS.Ptz.PtzAux3On = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux3On', params);")
SCS.Ptz.PtzAux4Off = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux4Off', params);")
SCS.Ptz.PtzAux4On = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux4On', params);")
SCS.Ptz.PtzAux5Off = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux5Off', params);")
SCS.Ptz.PtzAux5On = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux5On', params);")
SCS.Ptz.PtzAux6Off = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux6Off', params);")
SCS.Ptz.PtzAux6On = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux6On', params);")
SCS.Ptz.PtzAux7Off = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux7Off', params);")
SCS.Ptz.PtzAux7On = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux7On', params);")
SCS.Ptz.PtzAux8Off = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux8Off', params);")
SCS.Ptz.PtzAux8On = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux8On', params);")
SCS.Ptz.PtzAux2Off = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux2Off', params);")
SCS.Ptz.PtzAux2On = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux2On', params);")
SCS.Ptz.PtzAux1Off = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux1Off', params);")
SCS.Ptz.PtzAux1On = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux1On', params);")
SCS.Application.Search = new Function("var params = new Array(); window.external.Do('Application.Search', params);")
SCS.Views = new Object();
SCS.Views.SelectNextWindow = new Function("var params = new Array(); window.external.Do('Views.SelectNextWindow', params);")
SCS.Views.SelectWindow = new Function("windowNumber", "var params = new Array(); params.push(windowNumber); window.external.Do('Views.SelectWindow', params);")
SCS.Views.CopySelectedCameraViewItem = new Function("windowNumber", "viewNumber", "var params = new Array(); params.push(windowNumber); params.push(viewNumber); window.external.Do('Views.CopySelectedCameraViewItem', params);")
SCS.Ptz.JoystickZoom = new Function("axisValue", "axisRange", "absoluteAxis", "var params = new Array(); params.push(axisValue); params.push(axisRange); params.push(absoluteAxis); window.external.Do('Ptz.JoystickZoom', params);")
SCS.Ptz.JoystickPanTilt = new Function("panValue", "panRange", "panAbsolute", "tiltValue", "tiltRange", "tiltAbsolute", "optionalCameraId", "forceHardwareMove", "ensureSelectedViewItem", "var params = new Array(); params.push(panValue); params.push(panRange); params.push(panAbsolute); params.push(tiltValue); params.push(tiltRange); params.push(tiltAbsolute); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ensureSelectedViewItem); window.external.Do('Ptz.JoystickPanTilt', params);")
SCS.Views.PrintSelectedViewItem = new Function("var params = new Array(); window.external.Do('Views.PrintSelectedViewItem', params);")
SCS.Views.ReloadCameraItems = new Function("var params = new Array(); window.external.Do('Views.ReloadCameraItems', params);")
SCS.Application.ShowEvidenceLockList = new Function("var params = new Array(); window.external.Do('Application.ShowEvidenceLockList', params);")
SCS.Application.ShowExportDialogDevice = new Function("devices", "startTime", "endTime", "var params = new Array(); params.push(devices); params.push(startTime); params.push(endTime); window.external.Do('Application.ShowExportDialogDevice', params);")
SCS.Application.ShowExportDialogViewItem = new Function("var params = new Array(); window.external.Do('Application.ShowExportDialogViewItem', params);")
SCS.Ptz.PanTilt = new Function("panValue", "panRange", "panAbsolute", "tiltValue", "tiltRange", "tiltAbsolute", "optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(panValue); params.push(panRange); params.push(panAbsolute); params.push(tiltValue); params.push(tiltRange); params.push(tiltAbsolute); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PanTilt', params);")
SCS.Ptz.PtzAux8 = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux8', params);")
SCS.Ptz.PtzAux8Off = new Function("var params = new Array(); window.external.Do2('Ptz.PtzAux8', params);")
SCS.Ptz.PtzAux7 = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux7', params);")
SCS.Ptz.PtzAux7Off = new Function("var params = new Array(); window.external.Do2('Ptz.PtzAux7', params);")
SCS.Ptz.PtzAux6 = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux6', params);")
SCS.Ptz.PtzAux6Off = new Function("var params = new Array(); window.external.Do2('Ptz.PtzAux6', params);")
SCS.Ptz.PtzAux5 = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux5', params);")
SCS.Ptz.PtzAux5Off = new Function("var params = new Array(); window.external.Do2('Ptz.PtzAux5', params);")
SCS.Application.HideFullscreenView = new Function("var params = new Array(); window.external.Do('Application.HideFullscreenView', params);")
SCS.Ptz.PtzMoveContinuousDownStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousDownStart', params);")
SCS.Ptz.PtzMoveContinuousDownStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousDownStart', params);")
SCS.Ptz.PtzMoveContinuousDownLeftStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousDownLeftStart', params);")
SCS.Ptz.PtzMoveContinuousDownLeftStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousDownLeftStart', params);")
SCS.Ptz.PtzMoveContinuousDownRightStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousDownRightStart', params);")
SCS.Ptz.PtzMoveContinuousDownRightStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousDownRightStart', params);")
SCS.Ptz.PtzMoveContinuousLeftStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousLeftStart', params);")
SCS.Ptz.PtzMoveContinuousLeftStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousLeftStart', params);")
SCS.Ptz.PtzMoveContinuousRightStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousRightStart', params);")
SCS.Ptz.PtzMoveContinuousRightStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousRightStart', params);")
SCS.Ptz.PtzMoveContinuousUpStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousUpStart', params);")
SCS.Ptz.PtzMoveContinuousUpStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousUpStart', params);")
SCS.Ptz.PtzMoveContinuousUpLeftStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousUpLeftStart', params);")
SCS.Ptz.PtzMoveContinuousUpLeftStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousUpLeftStart', params);")
SCS.Ptz.PtzMoveContinuousUpRightStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousUpRightStart', params);")
SCS.Ptz.PtzMoveContinuousUpRightStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousUpRightStart', params);")
SCS.Ptz.PtzMoveContinuousZoomInStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousZoomInStart', params);")
SCS.Ptz.PtzMoveContinuousZoomInStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousZoomInStart', params);")
SCS.Ptz.PtzMoveContinuousZoomOutStart = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do('Ptz.PtzMoveContinuousZoomOutStart', params);")
SCS.Ptz.PtzMoveContinuousZoomOutStop = new Function("optionalCameraId", "forceHardwareMove", "ptzMoveSpeed", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); params.push(ptzMoveSpeed); window.external.Do2('Ptz.PtzMoveContinuousZoomOutStart', params);")
SCS.Application.ShowFullScreenView = new Function("var params = new Array(); window.external.Do('Application.ShowFullScreenView', params);")
SCS.Application.ShowRetrievalDialogViewItem = new Function("var params = new Array(); window.external.Do('Application.ShowRetrievalDialogViewItem', params);")
SCS.Camera.SnapshotSelectedViewItem = new Function("var params = new Array(); window.external.Do('Camera.SnapshotSelectedViewItem', params);")
SCS.Camera.StopRecordingOnSelectedCamera = new Function("var params = new Array(); window.external.Do('Camera.StopRecordingOnSelectedCamera', params);")
SCS.Camera.RemovablePrivacyMaskLift = new Function("var params = new Array(); window.external.Do('Camera.RemovablePrivacyMaskLift', params);")
SCS.Application.ToggleFullscreenView = new Function("var params = new Array(); window.external.Do('Application.ToggleFullscreenView', params);")
SCS.Ptz.PtzAux1 = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux1', params);")
SCS.Ptz.PtzAux1Off = new Function("var params = new Array(); window.external.Do2('Ptz.PtzAux1', params);")
SCS.Ptz.PtzAux2 = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux2', params);")
SCS.Ptz.PtzAux2Off = new Function("var params = new Array(); window.external.Do2('Ptz.PtzAux2', params);")
SCS.Ptz.PtzAux3 = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux3', params);")
SCS.Ptz.PtzAux3Off = new Function("var params = new Array(); window.external.Do2('Ptz.PtzAux3', params);")
SCS.Ptz.PtzAux4 = new Function("var params = new Array(); window.external.Do('Ptz.PtzAux4', params);")
SCS.Ptz.PtzAux4Off = new Function("var params = new Array(); window.external.Do2('Ptz.PtzAux4', params);")
SCS.Ptz.PtzFocusDown = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzFocusDown', params);")
SCS.Ptz.PtzFocusDownStop = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do2('Ptz.PtzFocusDown', params);")
SCS.Ptz.PtzFocusUp = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzFocusUp', params);")
SCS.Ptz.PtzFocusUpStop = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do2('Ptz.PtzFocusUp', params);")
SCS.Application.ReloadConfiguration = new Function("var params = new Array(); return window.external.Do('Application.ReloadConfiguration', params);")
SCS.Ptz.ToggleDigitalZoomEnableState = new Function("var params = new Array(); window.external.Do('Ptz.ToggleDigitalZoomEnableState', params);")
SCS.Views.FindCameraViewItem = new Function("shortCut", "var params = new Array(); params.push(shortCut); return window.external.Do('Views.FindCameraViewItem', params);")
SCS.Application.GetMode = new Function("var params = new Array(); return window.external.Do('Application.GetMode', params);")
SCS.Views.GetSelectedCameraViewItemShortcut = new Function("var params = new Array(); return window.external.Do('Views.GetSelectedCameraViewItemShortcut', params);")
SCS.Ptz.Preset = new Function("preset", "var params = new Array(); params.push(preset); window.external.Do('Ptz.Preset', params);")
SCS.Browse.SetPlayBackSpeed = new Function("speed", "var params = new Array(); params.push(speed); window.external.Do('Browse.SetPlayBackSpeed', params);")
SCS.Views.GetSelectedViewItemIndex = new Function("var params = new Array(); return window.external.Do('Views.GetSelectedViewItemIndex', params);")
SCS.Browse.GetDate = new Function("var params = new Array(); return window.external.Do('Browse.GetDate', params);")
SCS.Ptz.EnableDigitalZoom = new Function("enable", "var params = new Array(); params.push(enable); window.external.Do('Ptz.EnableDigitalZoom', params);")
SCS.Views.SelectCameraViewItem = new Function("shortCut", "var params = new Array(); params.push(shortCut); return window.external.Do('Views.SelectCameraViewItem', params);")
SCS.Views.SetCameraViewItemCamera = new Function("viewItemIndex", "camera", "var params = new Array(); params.push(viewItemIndex); params.push(camera); window.external.Do('Views.SetCameraViewItemCamera', params);")
SCS.Views.RestoreSelectedViewItem = new Function("var params = new Array(); window.external.Do('Views.RestoreSelectedViewItem', params);")
SCS.Views.ShowCameras = new Function("cameras", "viewGroupName", "groupName", "viewName", "var params = new Array(); params.push(cameras); params.push(viewGroupName); params.push(groupName); params.push(viewName); window.external.Do('Views.ShowCameras', params);")
SCS.Camera.StartRecordingOnSelectedCamera = new Function("var params = new Array(); window.external.Do('Camera.StartRecordingOnSelectedCamera', params);")
SCS.Camera.ToggleRecordingOnSelectedCamera = new Function("var params = new Array(); window.external.Do('Camera.ToggleRecordingOnSelectedCamera', params);")
SCS.Views.ToggleSelectedViewItemMaximizedState = new Function("var params = new Array(); window.external.Do('Views.ToggleSelectedViewItemMaximizedState', params);")
SCS.Views.MaximizeSelectedViewItem = new Function("var params = new Array(); window.external.Do('Views.MaximizeSelectedViewItem', params);")
SCS.Views.MoveViewItemSelectionRight = new Function("var params = new Array(); window.external.Do('Views.MoveViewItemSelectionRight', params);")
SCS.Views.MoveViewItemSelectionLeft = new Function("var params = new Array(); window.external.Do('Views.MoveViewItemSelectionLeft', params);")
SCS.Views.MoveViewItemSelectionDown = new Function("var params = new Array(); window.external.Do('Views.MoveViewItemSelectionDown', params);")
SCS.Views.MoveViewItemSelectionUp = new Function("var params = new Array(); window.external.Do('Views.MoveViewItemSelectionUp', params);")
SCS.Views.DeselectViewItem = new Function("var params = new Array(); window.external.Do('Views.DeselectViewItem', params);")
SCS.MultiWindow = new Object();
SCS.MultiWindow.MultiWindowSetDisplayedView = new Function("windowId", "viewName", "var params = new Array(); params.push(windowId); params.push(viewName); return window.external.Do('MultiWindow.MultiWindowSetDisplayedView', params);")
SCS.MultiWindow.MultiWindowGetDisplayedViewId = new Function("windowId", "var params = new Array(); params.push(windowId); return window.external.Do('MultiWindow.MultiWindowGetDisplayedViewId', params);")
SCS.MultiWindow.MultiWindowMinimizeFloatingWindow = new Function("windowId", "var params = new Array(); params.push(windowId); return window.external.Do('MultiWindow.MultiWindowMinimizeFloatingWindow', params);")
SCS.MultiWindow.MultiWindowRestoreFloatingWindow = new Function("windowId", "var params = new Array(); params.push(windowId); return window.external.Do('MultiWindow.MultiWindowRestoreFloatingWindow', params);")
SCS.MultiWindow.MultiWindowMaximizeFloatingWindow = new Function("windowId", "var params = new Array(); params.push(windowId); return window.external.Do('MultiWindow.MultiWindowMaximizeFloatingWindow', params);")
SCS.Application.Restore = new Function("var params = new Array(); window.external.Do('Application.Restore', params);")
SCS.MultiWindow.MultiWindowGetFullScreenWindowIds = new Function("var params = new Array(); return window.external.Do('MultiWindow.MultiWindowGetFullScreenWindowIds', params);")
SCS.MultiWindow.MultiWindowGetFloatingWindowIds = new Function("var params = new Array(); return window.external.Do('MultiWindow.MultiWindowGetFloatingWindowIds', params);")
SCS.MultiWindow.MultiWindowSetFloatingWindowSize = new Function("windowId", "width", "height", "var params = new Array(); params.push(windowId); params.push(width); params.push(height); return window.external.Do('MultiWindow.MultiWindowSetFloatingWindowSize', params);")
SCS.MultiWindow.MultiWindowSetFloatingWindowLocation = new Function("windowId", "x", "y", "var params = new Array(); params.push(windowId); params.push(x); params.push(y); return window.external.Do('MultiWindow.MultiWindowSetFloatingWindowLocation', params);")
SCS.MultiWindow.MultiWindowCloseWindow = new Function("windowId", "var params = new Array(); params.push(windowId); window.external.Do('MultiWindow.MultiWindowCloseWindow', params);")
SCS.MultiWindow.MultiWindowGetAllWindowIds = new Function("var params = new Array(); return window.external.Do('MultiWindow.MultiWindowGetAllWindowIds', params);")
SCS.MultiWindow.MultiWindowOpenFloatingWindow = new Function("viewName", "x", "y", "width", "height", "playbackSupported", "screenIndex", "var params = new Array(); params.push(viewName); params.push(x); params.push(y); params.push(width); params.push(height); params.push(playbackSupported); params.push(screenIndex); return window.external.Do('MultiWindow.MultiWindowOpenFloatingWindow', params);")
SCS.MultiWindow.MultiWindowOpenFullScreenWindow = new Function("viewName", "screenIndex", "var params = new Array(); params.push(viewName); params.push(screenIndex); return window.external.Do('MultiWindow.MultiWindowOpenFullScreenWindow', params);")
SCS.MultiWindow.MultiWindowCloseAllWindows = new Function("var params = new Array(); window.external.Do('MultiWindow.MultiWindowCloseAllWindows', params);")
SCS.MultiWindow.MultiWindowGetScreenCount = new Function("var params = new Array(); return window.external.Do('MultiWindow.MultiWindowGetScreenCount', params);")
SCS.Views.FindViewIndex = new Function("viewName", "startIndex", "var params = new Array(); params.push(viewName); params.push(startIndex); return window.external.Do('Views.FindViewIndex', params);")
SCS.Views.GetSelectedGroupId = new Function("var params = new Array(); return window.external.Do('Views.GetSelectedGroupId', params);")
SCS.Views.GetSelectedViewFullName = new Function("var params = new Array(); return window.external.Do('Views.GetSelectedViewFullName', params);")
SCS.Views.GetSelectedViewId = new Function("var params = new Array(); return window.external.Do('Views.GetSelectedViewId', params);")
SCS.Views.GetViewFullName = new Function("index", "var params = new Array(); params.push(index); return window.external.Do('Views.GetViewFullName', params);")
SCS.Views.GetViewId = new Function("index", "var params = new Array(); params.push(index); return window.external.Do('Views.GetViewId', params);")
SCS.Views.GetViewIndex = new Function("viewName", "var params = new Array(); params.push(viewName); return window.external.Do('Views.GetViewIndex', params);")
SCS.Views.GroupCount = new Function("var params = new Array(); return window.external.Do('Views.GroupCount', params);")
SCS.Application.HideSidePane = new Function("var params = new Array(); window.external.Do('Application.HideSidePane', params);")
SCS.Application.Maximize = new Function("var params = new Array(); window.external.Do('Application.Maximize', params);")
SCS.Application.Minimize = new Function("var params = new Array(); window.external.Do('Application.Minimize', params);")
SCS.Views.GotoNextView = new Function("var params = new Array(); window.external.Do('Views.GotoNextView', params);")
SCS.Views.GotoPreviousView = new Function("var params = new Array(); window.external.Do('Views.GotoPreviousView', params);")
SCS.Ptz.PtzFocusAuto = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzFocusAuto', params);")
SCS.Ptz.PtzFocusDownStart = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzFocusDownStart', params);")
SCS.Ptz.PtzFocusStop = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzFocusStop', params);")
SCS.Ptz.PtzFocusUpStart = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzFocusUpStart', params);")
SCS.Ptz.PtzGainDown = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzGainDown', params);")
SCS.Ptz.PtzGainReset = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzGainReset', params);")
SCS.Ptz.PtzGainUp = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzGainUp', params);")
SCS.Ptz.PtzIrisDown = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzIrisDown', params);")
SCS.Ptz.PtzIrisReset = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzIrisReset', params);")
SCS.Ptz.PtzIrisUp = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzIrisUp', params);")
SCS.Ptz.PtzMoveDown = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveDown', params);")
SCS.Ptz.PtzMoveDownLeft = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveDownLeft', params);")
SCS.Ptz.PtzMoveDownRight = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveDownRight', params);")
SCS.Ptz.PtzMoveHome = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveHome', params);")
SCS.Ptz.PtzMoveLeft = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveLeft', params);")
SCS.Ptz.PtzMoveRight = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveRight', params);")
SCS.Ptz.PtzMoveUp = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveUp', params);")
SCS.Ptz.PtzMoveUpLeft = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveUpLeft', params);")
SCS.Ptz.PtzMoveUpRight = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveUpRight', params);")
SCS.Ptz.PtzMoveZoomIn = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveZoomIn', params);")
SCS.Ptz.PtzMoveZoomOut = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzMoveZoomOut', params);")
SCS.Ptz.PanAbsolute = new Function("guid", "pan", "var params = new Array(); params.push(guid); params.push(pan); window.external.Do('Ptz.PanAbsolute', params);")
SCS.Ptz.Pan = new Function("axisValue", "axisRange", "absoluteAxis", "var params = new Array(); params.push(axisValue); params.push(axisRange); params.push(absoluteAxis); window.external.Do('Ptz.Pan', params);")
SCS.Ptz.PtzShutterDown = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzShutterDown', params);")
SCS.Ptz.PtzShutterReset = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzShutterReset', params);")
SCS.Ptz.PtzShutterUp = new Function("optionalCameraId", "forceHardwareMove", "var params = new Array(); params.push(optionalCameraId); params.push(forceHardwareMove); window.external.Do('Ptz.PtzShutterUp', params);")
SCS.Ptz.TiltAbsolute = new Function("guid", "tilt", "var params = new Array(); params.push(guid); params.push(tilt); window.external.Do('Ptz.TiltAbsolute', params);")
SCS.Ptz.Tilt = new Function("axisValue", "axisRange", "absoluteAxis", "var params = new Array(); params.push(axisValue); params.push(axisRange); params.push(absoluteAxis); window.external.Do('Ptz.Tilt', params);")
SCS.Ptz.ZoomAbsolute = new Function("guid", "zoom", "var params = new Array(); params.push(guid); params.push(zoom); window.external.Do('Ptz.ZoomAbsolute', params);")
SCS.Ptz.Zoom = new Function("axisValue", "axisRange", "absoluteAxis", "var params = new Array(); params.push(axisValue); params.push(axisRange); params.push(absoluteAxis); window.external.Do('Ptz.Zoom', params);")
SCS.Views.SelectView = new Function("name", "var params = new Array(); params.push(name); window.external.Do('Views.SelectView', params);")
SCS.Views.SelectViewItem = new Function("viewItem", "windowNumber", "var params = new Array(); params.push(viewItem); params.push(windowNumber); return window.external.Do('Views.SelectViewItem', params);")
SCS.Application.ShowBrowse = new Function("var params = new Array(); window.external.Do('Application.ShowBrowse', params);")
SCS.Application.ShowLive = new Function("var params = new Array(); window.external.Do('Application.ShowLive', params);")
SCS.Application.ShowSetup = new Function("var params = new Array(); window.external.Do('Application.ShowSetup', params);")
SCS.Application.ShowSidePane = new Function("var params = new Array(); window.external.Do('Application.ShowSidePane', params);")
SCS.Views.ShowSingleCamera = new Function("camera", "viewGroupName", "groupName", "viewName", "var params = new Array(); params.push(camera); params.push(viewGroupName); params.push(groupName); params.push(viewName); window.external.Do('Views.ShowSingleCamera', params);")
SCS.Application.ToggleSidePane = new Function("var params = new Array(); window.external.Do('Application.ToggleSidePane', params);")
SCS.Views.ViewCount = new Function("var params = new Array(); return window.external.Do('Views.ViewCount', params);")
SCS.Keyboard = new Object();
SCS.Keyboard.ShowSetup = new Function("var params = new Array(); window.external.Do('Keyboard.ShowSetup', params);")
SCS.Events = new Object();
SCS.Events.All = new Object();
SCS.Events.All.MS3 = new Object();
SCS.Events.All.MS3.All_EventTypes__Corporate_ = new Object();
SCS.Events.All.MS3.All_EventTypes__Corporate_.MakeAlarm = new Function("var params = new Array(); window.external.Do('Events.All.MS3.All_EventTypes__Corporate_.MakeAlarm', params);")
SCS.Events.All_EventTypes__Corporate_ = new Object();
SCS.Events.All_EventTypes__Corporate_.All_EventTypes__Corporate_ = new Object();
SCS.Events.All_EventTypes__Corporate_.All_EventTypes__Corporate_.MakeAlarm = new Function("var params = new Array(); window.external.Do('Events.All.MS3.All_EventTypes__Corporate_.MakeAlarm', params);")
SCS.Views.All = new Object();
SCS.Views.All.Private = new Object();
SCS.Views.All.Private.New_Group = new Object();
SCS.Views.All.Private.New_Group.New_View__1_x_1_ = new Function("var params = new Array(); window.external.Do('Views.All.Private.New_Group.New_View__1_x_1_', params);")
SCS.Views.All.Testing = new Object();
SCS.Views.All.Testing.Captis = new Object();
SCS.Views.All.Testing.Captis.New_View__2_x_2_ = new Function("var params = new Array(); window.external.Do('Views.All.Testing.Captis.New_View__2_x_2_', params);")
SCS.Views.All.Testing.Browsers = new Object();
SCS.Views.All.Testing.Browsers.New_View__2_x_2_ = new Function("var params = new Array(); window.external.Do('Views.All.Testing.Browsers.New_View__2_x_2_', params);")
SCS.Views.All.smart_walls = new Object();
SCS.Views.All.smart_walls.Test_Smart_Wall = new Object();
SCS.Views.All.smart_walls.Test_Smart_Wall.Monitor_1 = new Function("var params = new Array(); window.external.Do('Views.All.smart_walls.Test_Smart_Wall.Monitor_1', params);")
SCS.Views.All.smart_walls.Test_Smart_Wall.Monitor_2 = new Function("var params = new Array(); window.external.Do('Views.All.smart_walls.Test_Smart_Wall.Monitor_2', params);")
&lt;/SCRIPT&gt;
&lt;/BODY&gt;</value>
  </data>
  <data name="SCSBindScript" xml:space="preserve">
    <value>(async function(){ await CefSharp.BindObjectAsync("SCSApplication"); await CefSharp.BindObjectAsync("SCSGeneral"); window.SCS = { Application:SCSApplication, General:SCSGeneral };})();</value>
  </data>
</root>